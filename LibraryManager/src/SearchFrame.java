
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.time.Clock;
import java.util.LinkedList;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Ashraf Habromman
 */
public class SearchFrame extends javax.swing.JFrame {

    /**
     * Creates new form SearchAndDeleteFrame
     */
//    String [] SearchBasedOnComboBox = {"Book name", "ISBN","Author"};
    Integer type;
    Integer selectedTypeToSearch;
    LinkedList<Book> fileBooks;

    public SearchFrame(String title, Integer type) {
        setTitle(title);
        this.type = type;
        try{
            initComponents();
        }
        catch(Exception exp){
            JOptionPane.showMessageDialog(null, "Please select one of the list");
        }
        
        comboBoxForSearch.setSelectedItem(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        comboBoxForSearch = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        bookNameSearchTextField = new javax.swing.JTextField();
        ISBNSearchTextField = new javax.swing.JTextField();
        authorSearchTextField = new javax.swing.JTextField();
        okButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Library Manager");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Search Based on :");

        comboBoxForSearch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        comboBoxForSearch.setMaximumRowCount(3);
        comboBoxForSearch.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Book name", "ISBN", "Author", " " }));
        comboBoxForSearch.setEditor(null);
        comboBoxForSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxForSearchActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Book name");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("ISBN");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Author");

        bookNameSearchTextField.setEnabled(false);
        bookNameSearchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookNameSearchTextFieldActionPerformed(evt);
            }
        });

        ISBNSearchTextField.setEnabled(false);
        ISBNSearchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ISBNSearchTextFieldActionPerformed(evt);
            }
        });

        authorSearchTextField.setEnabled(false);
        authorSearchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authorSearchTextFieldActionPerformed(evt);
            }
        });

        okButton.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        okButton.setText("Ok");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bookNameSearchTextField)
                            .addComponent(ISBNSearchTextField)
                            .addComponent(authorSearchTextField)
                            .addComponent(comboBoxForSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(104, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboBoxForSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookNameSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ISBNSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(authorSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxForSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxForSearchActionPerformed
        // TODO add your handling code here:
        

        try {

            selectedTypeToSearch = comboBoxForSearch.getSelectedIndex();

            if (selectedTypeToSearch.equals(0)) {
                bookNameSearchTextField.setEnabled(true);
            } else {
                bookNameSearchTextField.setEnabled(false);
            }

            if (selectedTypeToSearch.equals(1)) {
                ISBNSearchTextField.setEnabled(true);
            } else {
                ISBNSearchTextField.setEnabled(false);
            }

            if (selectedTypeToSearch.equals(2)) {
                authorSearchTextField.setEnabled(true);
            } else {
                authorSearchTextField.setEnabled(false);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Please select one of the list");
        }


    }//GEN-LAST:event_comboBoxForSearchActionPerformed

    private void bookNameSearchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookNameSearchTextFieldActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_bookNameSearchTextFieldActionPerformed

    private void ISBNSearchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ISBNSearchTextFieldActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_ISBNSearchTextFieldActionPerformed

    private void authorSearchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authorSearchTextFieldActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_authorSearchTextFieldActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        // TODO add your handling code here:
        this.readFile();
        this.setVisible(false);
    }//GEN-LAST:event_okButtonActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(SearchFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(SearchFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(SearchFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(SearchFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new SearchFrame("nn", 1).setVisible(true);
//            }
//        });
//    }
//    
    public void readFile(){
        try{
        
            BufferedReader read = new BufferedReader(new FileReader("Books.txt"));
            BufferedWriter write;
            String book;
            this.fileBooks = new LinkedList<Book>();
            Integer counter = 0 ;
            Integer acuallCounter = null;
            while((book=read.readLine())!=null){
                
                String [] itemsOfBook = book.split(",");
                
                //System.out.println(itemsOfBook[1]);
                
                switch(this.type){
                    case 0 : // 0 it cames from search button;
                        if((itemsOfBook[0].equals(bookNameSearchTextField.getText())) || (itemsOfBook[1].equals(ISBNSearchTextField.getText())) || (itemsOfBook[2].equals(authorSearchTextField.getText()))){
                                //System.out.println(itemsOfBook[1]);
                                InformationBook resultOfBook = new InformationBook("Result Of Search", 1);
                                //System.out.println(",,,mmxmmmmmsssssssxskssssssssk");
                                resultOfBook.setBookName(itemsOfBook[0]);
                                resultOfBook.setISBN(itemsOfBook[1]);
                                resultOfBook.setAuthor(itemsOfBook[2]);
                                resultOfBook.setPublicationDate(itemsOfBook[3]);
                                resultOfBook.setNumberOfPages(itemsOfBook[4]);
                                resultOfBook.setPrice(itemsOfBook[5]);
                                //System.out.println(",,,mmxmmmmmsssssssxsksk");
                                resultOfBook.setVisible(true);
                                //System.out.println(",,,mmxmmmmmsssssssxsksk");
                                break;
                        
                        }
                    case 1 : // 1 it comes from delete button 
                        this.fileBooks.add(new Book(itemsOfBook[0], itemsOfBook[1], itemsOfBook[2], itemsOfBook[3], itemsOfBook[5], itemsOfBook[5]));
                          switch(this.selectedTypeToSearch){
                              
                              case 0 : //the user choose book name to search ...then update
                                  if(!itemsOfBook[0].equals(this.bookNameSearchTextField.getText()))
                                      counter++;
                                  else acuallCounter=counter;
                                  break;
                        
                              case 1 : //the user choose isbn to search ...then update
                                  if(!itemsOfBook[1].equals(this.ISBNSearchTextField.getText()))
                                      counter++;
                                  else acuallCounter=counter;
                                  break;
                        
                              case 2: //the user choose author to search ...then update
                                  if(!itemsOfBook[2].equals(this.authorSearchTextField.getText()))
                                      counter++;
                                  else acuallCounter=counter;
                                  break;
                            }                          
                        break; 
                        


                
                    case 2 : // 2 it comes from update button ; 
                            if((itemsOfBook[0].equals(bookNameSearchTextField.getText())) || (itemsOfBook[1].equals(ISBNSearchTextField.getText())) || (itemsOfBook[2].equals(authorSearchTextField.getText()))){
                                //System.out.println(itemsOfBook[1]);
                                InformationBook resultOfBookToUpdate = new InformationBook("Result Of Search to update", 2);
                                resultOfBookToUpdate.setUserEntered(bookNameSearchTextField.getText(), ISBNSearchTextField.getText(), authorSearchTextField.getText(), this.selectedTypeToSearch);
                                //System.out.println(",,,mmxmmmmmsssssssxskssssssssk");
                                resultOfBookToUpdate.setBookName(itemsOfBook[0]);
                                resultOfBookToUpdate.setISBN(itemsOfBook[1]);
                                resultOfBookToUpdate.setAuthor(itemsOfBook[2]);
                                resultOfBookToUpdate.setPublicationDate(itemsOfBook[3]);
                                resultOfBookToUpdate.setNumberOfPages(itemsOfBook[4]);
                                resultOfBookToUpdate.setPrice(itemsOfBook[5]);
                                //System.out.println(",,,mmxmmmmmsssssssxsksk");
                                resultOfBookToUpdate.setVisible(true);
                                //System.out.println(",,,mmxmmmmmsssssssxsksk");
                                break;
                            }
                }
            }
            bookNameSearchTextField.setText("");
            ISBNSearchTextField.setText("");
            authorSearchTextField.setText("");
            read.close();
            if(this.type.equals(1)){
                
                if(acuallCounter==null)
                    JOptionPane.showMessageDialog(null, "The book in not found");
                else
                {
                    write = new BufferedWriter(new FileWriter("Books.txt"));
                    //System.out.print(fileBooks.get(acuallCounter));
                    fileBooks.remove(acuallCounter.intValue());
                    //System.out.println(""+acuallCounter);
                    int numberOfBooks = fileBooks.size();
                    for(int i=0 ; i<numberOfBooks ; i++){
                        write.write(fileBooks.get(i).toString());
                        //System.out.println("sososooo");
                    }
                    write.close();
                    JOptionPane.showMessageDialog(null, "Book deleted");
                }

               
               
            }
            
           
        }
        catch(Exception ex){
            JOptionPane.showMessageDialog(null, "file not found");
        }
        
        
    }
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ISBNSearchTextField;
    private javax.swing.JTextField authorSearchTextField;
    private javax.swing.JTextField bookNameSearchTextField;
    private javax.swing.JComboBox comboBoxForSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables
}
//
//
//                        try {
//
//                            this.fileBooks.add(new Book(itemsOfBook[0], itemsOfBook[1], itemsOfBook[2], itemsOfBook[3], itemsOfBook[5], itemsOfBook[5]));
//                            switch(this.selectedTypeToSearch){
//                              
//                                case 0 : //the user choose book name to search ...then update
//                                    if(!itemsOfBook[0].equals(this.bookNameSearchTextField.getText()))
//                                        counter++;
//                                    else acuallCounter=counter;
//                                    break;
//                        
//                                case 1 : //the user choose isbn to search ...then update
//                                    if(!itemsOfBook[1].equals(this.ISBNSearchTextField.getText()))
//                                        counter++;
//                                    else acuallCounter=counter;
//                                    break;
//                        
//                                case 2: //the user choose author to search ...then update
//                                    if(!itemsOfBook[2].equals(this.authorSearchTextField.getText()))
//                                       counter++;
//                                    else acuallCounter=counter;
//                                    break;
//                            }    
//                            fileBooks.remove(acuallCounter);
//                            System.out.println(""+acuallCounter);
//                            try{
//                                
//                                int numberOfBooks = fileBooks.size();
//                                for(int i=0 ; i <numberOfBooks; i++ ){
//                                write.write(fileBooks.get(i).toString());
//                                //System.out.println("sososo");
//                        
//                            }
//                            
//
//                            }
//                            catch(Exception exp){
//                                JOptionPane.showMessageDialog(null, "file not found");
//                
//                            }
//                        }
//                        
//                        catch(Exception exp){
//                            JOptionPane.showMessageDialog(null, "file not found");
//                        }
//                    
//                    
//                    break;
//